/*
 * File: app/view/index/gridview.js
 *
 * This file was generated by Sencha Architect version 4.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('EventLog.view.index.gridview', {
    extend: 'Ext.container.Container',
    alias: 'widget.indexgridview',

    requires: [
        'EventLog.view.indexViewModel',
        'EventLog.view.indexViewController',
        'Ext.grid.Panel',
        'Ext.grid.column.Date',
        'Ext.view.Table',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.form.field.Date',
        'Ext.form.field.ComboBox',
        'optools._'
    ],

    controller: 'index',
    viewModel: {
        type: 'index'
    },
    itemId: 'gridview',
    defaultListenerScope: true,

    items: [
        {
            xtype: 'gridpanel',
            border: false,
            maskElement: 'body',
            ui: 'light',
            title: 'Event logs',
            headerBorders: false,
            store: 'Eventlog',
            columns: [
                {
                    xtype: 'datecolumn',
                    width: '11%',
                    dataIndex: 'time',
                    text: '{{Date}}',
                    format: 'Y-m-d h:i:s'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'class_name',
                    text: '{{Class}}'
                },
                {
                    xtype: 'gridcolumn',
                    width: '10%',
                    dataIndex: 'type',
                    text: '{{Type}}'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {

                        var state = record.get("state");
                        var store = Ext.getStore('Colors');
                        var rec = store.findRecord('state', state);
                        metaData.style = 'word-wrap: break-word; background: '+ rec.get("color") +'; color: white;';
                        metaData.tdAttr = 'data-color="'+ rec.get("color") +'"';
                        return value;
                    },
                    shrinkWrap: 3,
                    width: '20%',
                    cellWrap: true,
                    dataIndex: 'name',
                    text: '{{Object Name}}'
                },
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'state_type',
                    text: '{{State Type}}'
                },
                {
                    xtype: 'gridcolumn',
                    flex: 1,
                    sealed: true,
                    cellWrap: true,
                    dataIndex: 'detail',
                    enableTextSelection: true,
                    text: '{{Detail}}'
                }
            ],
            viewConfig: {
                shrinkWrap: 1,
                enableTextSelection: true,
                stripeRows: false
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    items: [
                        {
                            xtype: 'container',
                            margins: '0 5 0 10',
                            html: '{{Favorites}}'
                        },
                        {
                            xtype: 'button',
                            handler: function(button, e) {
                                this.up("indexgridview").controller.saveFilter(parent.addFavoriteLink);
                            },
                            iconCls: 'x-fa fa-star'
                        },
                        {
                            xtype: 'button',
                            handler: function(button, e) {
                                this.up("indexgridview").controller.saveFilter(parent.addShortcutLink);
                            },
                            iconCls: 'x-fa fa-window-maximize'
                        },
                        {
                            xtype: 'daterangepicker',
                            bind: {
                                values: '{filter}'
                            },
                            customEvents: {
                                setRange: function(cmp) {
                                    var dates = cmp.getPickerValue();
                                    Ext.ComponentQuery.query("#gridview").forEach(function(grid) {
                                        var fresh = {
                                            start_time: Math.floor(new Date(dates.startDateTimeYmdHis).getTime() / 1000),
                                            end_time: Math.floor(new Date(dates.endDateTimeYmdHis).getTime() / 1000),
                                        };
                                        grid.getViewModel().set("filter", Ext.apply({}, fresh, grid.getViewModel().data.filter))
                                    });
                                }
                            },
                            width: 187,
                            emptyText: '{{Filter by date}}'
                        },
                        {
                            xtype: 'combobox',
                            bind: {
                                value: '{refreshTime}'
                            },
                            fieldLabel: '{{Auto refresh}}',
                            displayField: 'label',
                            queryMode: 'local',
                            store: 'RefreshTime',
                            valueField: 'time',
                            listeners: {
                                select: 'onComboboxSelect'
                            }
                        },
                        {
                            xtype: 'button',
                            handler: function(button, e) {
                                this.up("indexgridview").controller.loadData();
                            },
                            iconCls: 'x-fa fa-refresh'
                        }
                    ]
                }
            ],
            listeners: {
                afterlayout: 'onGridpanelAfterLayout'
            }
        }
    ],
    listeners: {
        afterrender: 'onGridviewAfterRender'
    },

    onComboboxSelect: function(combo, record, eOpts) {
        var storage = Ext.util.LocalStorage.get("eventlog");

        storage.setItem("refreshTime", record.data.time);

        this.controller.loadData();
    },

    onGridpanelAfterLayout: function(container, layout, eOpts) {
        var colors = Ext.getStore("Colors").data.items;
        if (container.store.data.items.length === 0 || colors.length === 0) {
            console.warn("GRID NOT READY TO PAINT DE COLUMNS");
            return ;
        }

        colors.forEach(function(record) {
            var color = record.get("color");
            var elements = document.querySelectorAll('td[data-color="'+ color +'"]');
            elements.forEach(function(element) {
                element.style.backgroundColor = color;
            });
        });
    },

    onGridviewAfterRender: function(component, eOpts) {
        var filtersParams = JSON.parse(optools._.getParameterByName("filters", window.location.href) || "{}");

        this.getViewModel().set("filter", Ext.apply({}, filtersParams, this.getViewModel().data.filter));

        var storage = Ext.util.LocalStorage.get("eventlog");

        var timer = storage.getItem("refreshTime");

        if (timer !== null) {
            this.getViewModel().set("refreshTime", timer);
        }

        this.controller.loadData();
    }

});